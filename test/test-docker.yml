# Test Docker training setup for https://docker.training.crafteo.io/ and https://github.com/PierreBeucher/example-voting-app
# Deploy Example Voting App and other training related applications on sandbox instance and check they're as expected
# Ensuring trainee will eb able to perform workshops and exercises during training
- hosts: all
  remote_user: "{{ sandbox_user }}"
  tasks:
    # 
    # Docker setup
    # 
    - name: run a simple Docker command
      command: docker run alpine sh -c "echo foobar"
      tags: [ docker ]
      register: docker_simple_command
    
    - name: show simple Docker command output
      tags: [ docker ]
      debug:
        var: docker_simple_command.stdout

    # 
    # Example Voting App tests
    # Make sure app can be deployed And is reachable on port 5000/5001
    # 

    # Was unable to install required "compose" Python package with NixOS
    # To use 'community.docker.docker_compose'
    # Relying on command instead of docker_compose module...
    - name: deploy Docker Compose app
      tags: [ evp ]
      ansible.builtin.command: 
        cmd: docker compose up -d
        chdir: "{{ ansible_env.HOME }}/example-voting-app"
    
    - name: check Vote on 5000
      tags: [ evp ]
      delegate_to: localhost
      ansible.builtin.uri:
        url: http://{{ fqdn }}:5000
      register: vote_task
      retries: 10
      delay: 5
      until: vote_task is not failed # may take a few seconds to start

    - name: check Result on 5001
      tags: [ evp ]
      delegate_to: localhost
      ansible.builtin.uri:
        url: http://{{ fqdn }}:5001
      register: result_task
      retries: 10
      delay: 5
      until: result_task is not failed # may take a few seconds to start

    # Traefik with Let's Encrypt certs
    - name: create .env var for Traefik with service URL
      tags: [ traefik ]
      ansible.builtin.copy:
        content: |
          VOTE_URL=vote.{{ fqdn }}
          RESULT_URL=result.{{ fqdn }}
        dest: "{{ ansible_env.HOME }}/example-voting-app/.env"

    # Use Let's Encrypt Staging root CA to validate HTTPS config
    # See https://letsencrypt.org/docs/staging-environment/
    - name: Download Let's Encrypt staging root CA
      tags: [ traefik ]
      ansible.builtin.get_url:
        url: https://letsencrypt.org/certs/staging/letsencrypt-stg-root-x1.pem
        dest: /tmp/letsencrypt-stg-root-x1.pem

    - name: deploy with Traefik and Certificates
      tags: [ traefik ]
      ansible.builtin.command: 
        cmd: docker compose -f docker-compose.yml -f resources/traefik.yml up -d
        chdir: "{{ ansible_env.HOME }}/example-voting-app"

    - name: check Vote HTTPS
      tags: [ traefik ]
      ansible.builtin.uri:
        url: https://vote.{{ fqdn }}
        ca_path: /tmp/letsencrypt-stg-root-x1.pem
      register: vote_uri
      retries: 12
      delay: 10
      until: vote_uri is not failed # may take a few seconds to be ready
    
    - name: check Result HTTPS
      tags: [ traefik ]
      ansible.builtin.uri:
        url: https://result.{{ fqdn }}
        ca_path: /tmp/letsencrypt-stg-root-x1.pem
      register: result_uri
      retries: 12
      delay: 10
      until: result_uri is not failed # may take a few seconds to be ready

    # VS Code Server
    - name: query VS Code URL
      tags: [ code ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:8080
      register: vscode_uri
      retries: 6
      delay: 10
      until: vscode_uri is not failed # may take a few seconds to be ready

    # ELK stack
    - name: deploy ELK stack
      tags: [ elk ]
      ansible.builtin.command: 
        cmd: make elk
        chdir: "{{ ansible_env.HOME }}/example-voting-app"

    - name: check Kibana URL
      tags: [ elk ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:8082
      register: kibana_uri
      retries: 60 # may take quite some time to be ready, Kibana is a bit heavy
      delay: 10
      until: kibana_uri is not failed 

    - name: check Elasticsearch URL
      tags: [ elk ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:8091/_cat/indices
      register: elasticsearch_uri
      retries: 60 # may take quite some time to be ready, Elasticsearch is a bit heavy
      delay: 10
      until: elasticsearch_uri is not failed
    
    - name: deploy App stack with logging override
      tags: [ elk ]    
      ansible.builtin.command: 
        cmd: make logging
        chdir: "{{ ansible_env.HOME }}/example-voting-app"

    - name: check Elasticsearch indice exists
      tags: [ elk ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:8091/_cat/indices
        return_content: true
      register: elasticsearch_uri
      retries: 6
      delay: 10
      # check an indice like "logstash-2023.05.11" exists
      # if yes, Elastic received some logs from our stack via Logstash as expected
      until: elasticsearch_uri.content is regex('logstash-[0-9]+')

    - name: down ELK stack
      ansible.builtin.command: 
        cmd: make elk-down
        chdir: "{{ ansible_env.HOME }}/example-voting-app"

    # Prometheus stack
    - name: clone Prometheus stack Git repos
      tags: [ prom ]
      ansible.builtin.git:
        repo:  https://github.com/PierreBeucher/prometheus.git
        dest: "{{ ansible_env.HOME }}/prometheus"
    
    - name: deploy Prometheus stack
      tags: [ prom ]    
      ansible.builtin.command: 
        cmd: docker compose up -d
        chdir: "{{ ansible_env.HOME }}/prometheus"

    - name: check Grafana URL
      tags: [ prom ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:3000
      register: grafana_uri
      retries: 12
      delay: 10
      until: grafana_uri is not failed

    - name: check Prometheus URL
      tags: [ prom ]
      ansible.builtin.uri:
        url: http://{{ fqdn }}:9090/-/ready
      register: prom_uri
      retries: 12
      delay: 10
      until: prom_uri is not failed
